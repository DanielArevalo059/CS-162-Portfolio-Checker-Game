import unittest
from CheckersGame import Checkers, Player, CheckerPiece

class TestCheckers(unittest.TestCase):
    """Contains unit tests for CheckersGame.py"""

    def test_player(self):
        """Tests name and color is correct"""
        game = Checkers()
        player1 = game.create_player("Daniel", "White")
        player2 = game.create_player("Kali", "Black")
       # self.assertEqual(player1.get_player_name(), "Daniel")
        self.assertEqual(player1.get_player_color(), "White")

    def test_capture(self):
        """Tests a captured piece"""
        game = Checkers()
        player1 = game.create_player("Daniel", "White")
        player2 = game.create_player("Kali", "Black")
        game.play_game("Kali", (5, 0), (4, 1))
        game.play_game("Daniel", (2, 1), (3, 2))
        game.play_game("Kali", (5, 2), (4, 3))
        game.play_game("Daniel", (3, 2), (5, 0))
        self.assertEqual(player1.get_captured_pieces_count(), 1)

    def test_king(self):
        """Tests a king"""
        game = Checkers()
        player1 = game.create_player("Daniel", "White")
        player2 = game.create_player("Kali", "Black")
        game.play_game("Kali", (5, 0), (4, 1))
        game.play_game("Daniel", (2, 1), (3, 2))
        game.play_game("Kali", (5, 2), (4, 3))
        game.play_game("Daniel", (3, 2), (5, 0))
        game.play_game("Kali", (6, 1), (5, 2))
        game.play_game("Daniel", (1, 0), (2, 1))
        game.play_game("Kali", (4, 3), (3, 2))
        game.play_game("Daniel", (2, 1), (3, 0))
        game.play_game("Kali", (5, 2), (4, 1))
        game.play_game("Daniel", (3, 0), (5, 2))
        game.play_game("Kali", (6, 3), (4, 1))
        game.play_game("Daniel", (1, 2), (2, 1))
        game.play_game("Kali", (7, 0), (6, 1))
        game.play_game("Daniel", (2, 1), (3, 0))
        game.play_game("Kali", (6, 1), (5, 2))
        game.play_game("Daniel", (5, 0), (6, 1))
        game.play_game("Kali", (3, 2), (2, 1))
        game.play_game("Daniel", (6, 1), (7, 0))

        self.assertEqual(player1.get_king_count(), 1)

    def test_2_turns_w_capture(self):
        game = Checkers()
        player1 = game.create_player("Daniel", "White")
        player2 = game.create_player("Kali", "Black")
        game.play_game("Kali", (5, 0), (4, 1))
        game.play_game("Daniel", (2, 1), (3, 2))
        game.play_game("Kali", (5, 2), (4, 3))
        game.play_game("Daniel", (3, 2), (5, 0))
        game.play_game("Kali", (6, 1), (5, 2))
        game.play_game("Daniel", (1, 0), (2, 1))
        game.play_game("Kali", (4, 3), (3, 2))
        game.play_game("Daniel", (2, 1), (3, 0))
        game.play_game("Kali", (5, 2), (4, 1))
        game.play_game("Daniel", (3, 0), (5, 2))
        game.play_game("Kali", (6, 3), (4, 1))
        game.play_game("Daniel", (1, 2), (2, 1))
        game.play_game("Kali", (7, 0), (6, 1))
        game.play_game("Daniel", (2, 1), (3, 0))
        game.play_game("Kali", (6, 1), (5, 2))
        game.play_game("Daniel", (5, 0), (6, 1))
        game.play_game("Kali", (3, 2), (2, 1))
        game.play_game("Daniel", (6, 1), (7, 0))
        game.play_game("Kali", (5, 6), (4, 5))
        game.play_game("Daniel", (7, 0), (4, 3))
        game.play_game("Daniel", (4,3), (1,0))
        self.assertIs(player1.get_captured_pieces_count(),4)

    def test_triple_king(self):
        game = Checkers()
        player1 = game.create_player("Daniel", "White")
        player2 = game.create_player("Kali", "Black")
        game.play_game("Kali", (5, 0), (4, 1))
        game.play_game("Daniel", (2, 1), (3, 2))
        game.play_game("Kali", (5, 2), (4, 3))
        game.play_game("Daniel", (3, 2), (5, 0))
        game.play_game("Kali", (6, 1), (5, 2))
        game.play_game("Daniel", (1, 0), (2, 1))
        game.play_game("Kali", (4, 3), (3, 2))
        game.play_game("Daniel", (2, 1), (3, 0))
        game.play_game("Kali", (5, 2), (4, 1))
        game.play_game("Daniel", (3, 0), (5, 2))
        game.play_game("Kali", (6, 3), (4, 1))
        game.play_game("Daniel", (1, 2), (2, 1))
        game.play_game("Kali", (7, 0), (6, 1))
        game.play_game("Daniel", (2, 1), (3, 0))
        game.play_game("Kali", (6, 1), (5, 2))
        game.play_game("Daniel", (5, 0), (6, 1))
        game.play_game("Kali", (3, 2), (2, 1))
        game.play_game("Daniel", (6, 1), (7, 0))
        game.play_game("Kali", (5, 6), (4, 5))
        game.play_game("Daniel", (7, 0), (4, 3))
        game.play_game("Daniel", (4, 3), (1, 0))
        game.play_game("Kali", (4, 5), (3, 6))
        game.play_game("Daniel", (0, 1), (1, 2))
        game.play_game("Kali", (5, 4), (4, 3))
        game.play_game("Daniel", (1, 0), (0, 1))
        self.assertEqual(player1.get_triple_king_count(), 1)

    def test_King_capture(self):
        game = Checkers()
        player1 = game.create_player("Daniel", "White")
        player2 = game.create_player("Kali", "Black")
        game.play_game("Kali", (5, 0), (4, 1))
        game.play_game("Daniel", (2, 1), (3, 2))
        game.play_game("Kali", (5, 2), (4, 3))
        game.play_game("Daniel", (3, 2), (5, 0))
        game.play_game("Kali", (6, 1), (5, 2))
        game.play_game("Daniel", (1, 0), (2, 1))
        game.play_game("Kali", (4, 3), (3, 2))
        game.play_game("Daniel", (2, 1), (3, 0))
        game.play_game("Kali", (5, 2), (4, 1))
        game.play_game("Daniel", (3, 0), (5, 2))
        game.play_game("Kali", (6, 3), (4, 1))
        game.play_game("Daniel", (1, 2), (2, 1))
        game.play_game("Kali", (7, 0), (6, 1))
        game.play_game("Daniel", (2, 1), (3, 0))
        game.play_game("Kali", (6, 1), (5, 2))
        game.play_game("Daniel", (5, 0), (6, 1))
        game.play_game("Kali", (3, 2), (2, 1))
        game.play_game("Daniel", (6, 1), (7, 0))
        game.play_game("Kali", (5, 6), (4, 5))
        game.play_game("Daniel", (7, 0), (4, 3))
        game.play_game("Daniel", (4, 3), (1, 0))
        game.play_game("Kali", (4, 5), (3, 6))
        game.play_game("Daniel", (0, 1), (1, 2))
        game.play_game("Kali", (5, 4), (4, 3))
        game.play_game("Daniel", (1, 0), (0, 1))
        game.play_game("Kali", (4, 3), (3, 2))
        game.play_game("Daniel", (0, 1), (5,6))
        self.assertEqual(player1.get_triple_king_count(), 1)
        game.play_game("Kali", (6,7), (4, 5))
        self.assertEqual(player1.get_triple_king_count(), 0)


if __name__ == "__main__":
    unittest.main()